<!doctype html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0">
  <meta http-equiv="X-UA-Compatible" content="ie=edge">
  <title>Visitor</title>

  <script src="https://code.jquery.com/jquery-3.1.1.min.js"></script>
  <script src="https://code.highcharts.com/highcharts.js"></script>
  <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0/css/bootstrap.min.css" integrity="sha384-Gn5384xqQ1aoWXA+058RXPxPg6fy4IWvTNh0E263XmFcJlSAwiGgFAW/dAiS6JXm" crossorigin="anonymous">
</head>
<body>

<nav class="navbar">
  <section class="navbar-brand">Current Visitors</section>
</nav>

<div id="container" style="height: 400px;"></div>
<div class="container">
  <div class="row mt-5">
    <div class="col-4">
      <h2>Console</h2>
      <ul id="console">
        <li>Bla bla bla</li>
      </ul>
    </div>
    <div class="col-8">
      <h2>Configuration</h2>
      <form>
        <div class="form-group">
          <h4>Web Worker Count: <span id="webworker_range_display">4</span></h4>
          <input id="webworker_range" class="range form-control" type="range"
                 min="1" max="20" value="4">
          <small id="hardware-warning" class="form-text text-danger" style="display: none;">
            Core limit exceeded, browser might crash :(
          </small>
        </div>

        <div class="form-group">
          <h4>Clicks Per Worker: <span id="webworker_clicks_display">5</span></h4>
          <input id="webworker_clicks" class="range form-control" type="range"
                 min="1" max="10000" value="5">
        </div>
      </form>

      <button id="track" class="btn btn-primary btn-lg">Hit It!</button>
      <button id="stop_track" class="btn btn-danger btn-lg" style="display: none">Cancel</button>
    </div>
  </div>
  <div class="row mt-2">
    <div class="col-4"></div>
    <div class="col" id="progress_bars">
    </div>
    <div class="col-8"></div>
  </div>
</div>

<!--<script id="tracking_command_worker" type="javascript">-->
<script id="tracking_command_worker" type="javascript/worker">
  // https://www.html5rocks.com/en/tutorials/workers/basics/
  self.onmessage = function (e) {
    var cnt = 1;
    var workerId = e.data.worker_id;
    var clicksCount = e.data.clicks_count;
    var sendClicks = function () {
      if (cnt <= clicksCount) {
        self.postMessage({ worker_id: workerId, processed: cnt, total: clicksCount });
        cnt += 1;
        setTimeout(sendClicks, 200);
      }
    };

    setTimeout(sendClicks, 200);
  };
</script>

<script type="text/javascript" charset="utf-8">
  $('.range').on('input', function (evt) {
    var $target = $(evt.target);
    var $elProgressBars = $('#progress_bars');
    var $elStartBtn = $('#track');
    var $elStopBtn = $('#stop_track');

    $elStartBtn.attr('disabled', false);
    $elStopBtn.hide();
    $elProgressBars.empty();

    $('#' + $target.attr('id') + '_display').html($target.val());
    if ($target.attr('id') === 'webworker_range') {
      var $elHardwareWarning = $('#hardware-warning');
      if (Number($target.val()) > navigator.hardwareConcurrency) {
        $elHardwareWarning.show();
      }
      else {
        $elHardwareWarning.hide();
      }
    }
  });

  var workers = [];
  $('#stop_track').on('click', function (evt) {
    var $elProgressBars = $('#progress_bars');
    var $elStartBtn = $('#track');
    var $elStopBtn = $(evt.target);
    var $elRanges = $('.range');

    $elStopBtn.hide();
    $elStartBtn.attr('disabled', false);
    $elRanges.attr('disabled', false);
    $elProgressBars.empty();
    workers.forEach(function (worker) { worker.worker.terminate(); })
    workers = [];
  });

  $('#track').on('click', function (evt) {
    var $elProgressBars = $('#progress_bars');
    var $elStartBtn = $(evt.target);
    var $elStopBtn = $('#stop_track');
    var $elRanges = $('.range');

    $elStopBtn.show();
    $elStartBtn.attr('disabled', true);
    $elRanges.attr('disabled', true);
    $elProgressBars.empty();

    var workerCount = Number($('#webworker_range').val());
    var hitCount = Number($('#webworker_clicks').val());
    var workerBlob = new Blob([ document.querySelector('#tracking_command_worker').textContent ]);
    for (var i = 0; i < workerCount; i++) {
      var $elWorkerProgressBar = $(
        '<label class="h5 mt-2">Worker ' + i + '</label>' +
        '<div class="progress">' +
        '<div class="progress-bar progress-bar-striped" role="progressbar" aria-valuemin="0" aria-valuemax="100"></div>' +
        '</div>');
      $elProgressBars.append($elWorkerProgressBar);

      var worker = new Worker(window.URL.createObjectURL(workerBlob));
      workers.push({
        workerId: i,
        worker: worker,
        workerProgressBar: $elWorkerProgressBar
      });

      worker.onmessage = function (evt) {
        var workerId = evt.data.worker_id;
        console.log('Worker ' + workerId + ' is processing...' + JSON.stringify(evt.data, null, 2));
        var workerProgress = evt.data.processed;
        var workerTotal = evt.data.total;
        var $elProgressBar = workers[ workerId ].workerProgressBar;
        $elProgressBar.find('div[role="progressbar"]').css('width', workerProgress / workerTotal * 100 + '%');
      };

      worker.postMessage({ clicks_count: hitCount, worker_id: i });
    }
  });
</script>

<script type="text/javascript" charset="utf-8">
  Highcharts.theme = {
    "colors": [ "#F92672", "#66D9EF", "#A6E22E", "#A6E22E" ],
    "chart": {
      "backgroundColor": "#272822",
      "style": { "fontFamily": "Inconsolata", "color": "#A2A39C" }
    },
    "title": {
      "style": { "color": "#A2A39C" },
      "align": "left"
    },
    "subtitle": {
      "style": { "color": "#A2A39C" },
      "align": "left"
    },
    "legend": {
      "align": "right",
      "verticalAlign": "bottom",
      "itemStyle": {
        "fontWeight": "normal", "color": "#A2A39C"
      }
    },
    "xAxis": {
      "gridLineDashStyle": "Dot",
      "gridLineWidth": 1,
      "gridLineColor": "#A2A39C",
      "lineColor": "#A2A39C",
      "minorGridLineColor": "#A2A39C",
      "tickColor": "#A2A39C",
      "tickWidth": 1
    },
    "yAxis": {
      "gridLineDashStyle": "Dot",
      "gridLineColor": "#A2A39C",
      "lineColor": "#A2A39C",
      "minorGridLineColor": "#A2A39C",
      "tickColor": "#A2A39C",
      "tickWidth": 1
    }
  };

  // Apply the theme
  Highcharts.setOptions(Highcharts.theme);

  var chart = Highcharts.chart('container', {
    chart: {
      type: 'areaspline',
    },

    title: {
      text: 'Visitor Tracking Overview',
    },

    xAxis: {
      type: 'datetime'
    },

    series: [
      {
        name: 'Unique Visitors Count',
        animation: false,
        data: [],
      },
      // {
      //   name: 'Current Clicks',
      //   animation: false,
      //   data: [],
      // },
    ],

    plotOptions: {
      areaspline: {
        fillOpacity: 0.1,
        marker: {
          enabled: false,
        }
      }
    }
  });

  // function randomSin() {
  //   var value = 0, i = 0;
  //   return function () {
  //     value = Math.max(-10,
  //       Math.min(10, value +
  //         .8 * Math.random() -
  //         .4 + .2 * Math.cos(i += .2)));
  //     return value;
  //   }
  // }

  // Create WebSocket connection.
  const socket = new WebSocket('ws://localhost:9293');
  const serverDelay = 5; // 5 seconds lag

  // Connection opened
  socket.addEventListener('open', function (evt) {
    setInterval(function () {
      socket.send(JSON.stringify({
        time: Math.round(+(new Date()) / 1000) - serverDelay, // Server accept seconds only
      }));
    }, 1000);

    // $.getJSON('//ipapi.co/json/', function (data) {
    //   var $elConsole = $('#console');
    //   var ipAddress = JSON.stringify(data);
    //   $elConsole.append($('<li>' + ipAddress[ 'ip' ] + ' (' + ipAddress[ 'timezone' ] + ') has joined the party'));
    //
    //   partyMember = ipAddress;
    // });
  });

  // Listen for messages
  socket.addEventListener('message', function (evt) {
    console.log('Message from server ', evt.data);
    var serverData = JSON.parse(evt.data);
    var newVisit = [ serverData.time * 1000, serverData.count ];
    chart.series[ 0 ].addPoint(newVisit, true, false);
  });
</script>
</body>
</html>